diff --git a/tac_lite.module b/tac_lite.module
index 69b645b..086167e 100644
--- a/tac_lite.module
+++ b/tac_lite.module
@@ -111,7 +111,7 @@ function tac_lite_admin_settings($form, &$form_state) {
   else {
     $options = array();
     foreach ($vocabularies as $vid => $vocab) {
-      $options[$vid] = $vocab->name;
+      $options[$vocab->machine_name] = $vocab->name;
     }
 
     $form['tac_lite_categories'] = array(
@@ -282,7 +282,7 @@ function tac_lite_admin_scheme_form($form, $form_state, $i) {
       '#prefix' => '<p>',
       '#suffix' => '</p>',
     );
-    $vocabularies = taxonomy_get_vocabularies();
+    $vocabularies = taxonomy_vocabulary_get_names();
     $all_defaults = variable_get('tac_lite_grants_scheme_' . $i, array());
     $form['tac_lite_grants_scheme_' . $i] = array('#tree' => TRUE);
     foreach ($roles as $rid => $role_name) {
@@ -382,7 +382,7 @@ function tac_lite_form_alter(&$form, &$form_state, $form_id){
   // Catch for the tac_lite category on the user edit form.
   if ($form_id == 'user_profile_form') {
     if ($form['#user_category'] == 'tac_lite') {
-      $vocabularies = taxonomy_get_vocabularies();
+      $vocabularies = taxonomy_vocabulary_get_names();
       $vids = variable_get('tac_lite_categories', NULL);
       if (count($vids)) {
         for ($i = 1; $i <= variable_get('tac_lite_schemes', 1); $i++) {
@@ -405,8 +405,8 @@ function tac_lite_form_alter(&$form, &$form_state, $form_id){
               // (Might only be necessary if we are adding in custom validation?)
               $default_values = array();
               if (!empty($form['#user']->data[$config['realm']])) {
-                if (isset($form['#user']->data[$config['realm']][$vid])) {
-                  $default_values = $form['#user']->data[$config['realm']][$vid];
+                if (isset($form['#user']->data[$config['realm']][$v->vid])) {
+                  $default_values = $form['#user']->data[$config['realm']][$v->vid];
                 }
               }
               $form['tac_lite'][$config['realm']][$vid] =  _tac_lite_term_select($v, $default_values);
@@ -534,7 +534,7 @@ function _tac_lite_get_terms($node) {
     $v_alias = $query->join('taxonomy_vocabulary', 'v', 't.vid = v.vid');
     $query->fields( $t_alias );
     $query->condition("r.nid", $node->nid);
-    $query->condition("t.vid", $vids, 'IN');
+    $query->condition("v.machine_name", $vids, 'IN');
     $result = $query->execute();
     foreach ($result as $term) {
       if (empty($tids[$term->tid])) {
@@ -604,6 +604,7 @@ function tac_lite_node_get_terms($node) {
  *   An array of values to use for the default_value argument for this form element.
  */
 function _tac_lite_term_select($v, $default_values = array()) {
+  $v = taxonomy_vocabulary_load($v->vid);
   $tree = taxonomy_get_tree($v->vid);
   $options = array(0 => '<' . t('none') . '>');
   if ($tree) {
@@ -727,9 +728,10 @@ function tac_lite_query_term_access_alter(QueryAlterableInterface $query) {
 
     // Prevent query from finding terms the current user does not have permission to see.
     $query->leftJoin('taxonomy_term_data', 'tac_td', $primary_table . '.tid = tac_td.tid');
+    $query->join('taxonomy_vocabulary', 'tac_v', 'tac_td.vid = tac_v.vid');
     $or = db_or();
     $or->condition($primary_table . '.tid', $tids, 'IN');
-    $or->condition('tac_td.vid', $vids, 'NOT IN');
+    $or->condition('tac_v.machine_name', $vids, 'NOT IN');
     $query->condition($or);
   }
 }
